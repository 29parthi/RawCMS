//******************************************************************************
// <copyright file="license.md" company="RawCMS project  (https://github.com/arduosoft/RawCMS)">
// Copyright (c) 2019 RawCMS project  (https://github.com/arduosoft/RawCMS)
// RawCMS project is released under GPL3 terms, see LICENSE file on repository root at  https://github.com/arduosoft/RawCMS .
// </copyright>
// <author>Daniele Fontani, Emanuele Bucarelli, Francesco Mina'</author>
// <autogenerated>true</autogenerated>
//******************************************************************************
using IdentityServer4.Services;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Identity;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using RawCMS.Library.Core;
using RawCMS.Library.Core.Attributes;
using RawCMS.Library.Core.Interfaces;
using RawCMS.Library.Service;
using RawCMS.Plugins.Core.Configuration;
using RawCMS.Plugins.Core.Extensions;
using RawCMS.Plugins.Core.Handlers;
using RawCMS.Plugins.Core.Stores;
using System.Collections.Generic;
using IdentityRole = RawCMS.Plugins.Core.Model.IdentityRole;
using IdentityUser = RawCMS.Plugins.Core.Model.IdentityUser;

namespace RawCMS.Plugins.Core
{
    [PluginInfo(1)]
    public class AuthPlugin : RawCMS.Library.Core.Extension.Plugin, IConfigurablePlugin<AuthConfig>
    {
        public override string Name => "Authorization";

        public override string Description => "Add authorizaton capabilities";

        private readonly AuthConfig config;
        private AppEngine appEngine;

        public AuthPlugin(AppEngine appEngine, AuthConfig config, ILogger logger) : base(appEngine, logger)
        {
            this.appEngine = appEngine;
            this.config = config;
            Logger.LogInformation("Authorization plugin loaded");
        }

        public override void ConfigureServices(IServiceCollection services)
        {
            services.AddScoped<IUserStore<IdentityUser>, RawUserStore>();
            services.AddScoped<IUserPasswordStore<IdentityUser>, RawUserStore>();
            services.AddScoped<IPasswordValidator<IdentityUser>, RawUserStore>();
            services.AddScoped<IUserClaimStore<IdentityUser>, RawUserStore>();
            services.AddScoped<IPasswordHasher<IdentityUser>, RawUserStore>();
            services.AddScoped<IProfileService, RawUserStore>();
            services.AddScoped<IUserClaimsPrincipalFactory<IdentityUser>, RawClaimsFactory>();

            services.AddScoped<RawRoleStore>();
            services.AddScoped<IRoleStore<IdentityRole>, RawRoleStore>();
            services.AddIdentity<IdentityUser, IdentityRole>();

            // configure identity server with in-memory stores, keys, clients and scopes
            services.AddIdentityServer()
            .AddDeveloperSigningCredential()
            .AddInMemoryPersistedGrants()
            .AddInMemoryIdentityResources(this.config.GetIdentityResources())
            .AddInMemoryApiResources(config.GetApiResources())
            .AddInMemoryClients(config.GetClients())
            .AddAspNetIdentity<IdentityUser>()
            .AddProfileServiceCustom();

            var schemeList = new List<string> { "Bearer" };
            var authBuilder = services.AddAuthentication();

            //rawcms providers
            authBuilder = authBuilder.AddScheme<RawIdentityServerAuthenticationOptions, RawLocalAccessTokenValidationHandler>("Bearer", (o) =>
                 {
                     o.AdminApiKey = this.config.RawCMSProvider.AdminApiKey;
                     o.ApiKey = this.config.RawCMSProvider.ApiKey;
                 });

            if (this.config.ExternalProviders != null && this.config.ExternalProviders.Count > 0)
            {
                var crudService = services.BuildServiceProvider().GetService<CRUDService>();

                foreach (var provider in this.config.ExternalProviders)
                {
                    //TODO: add multiple authentication schema type
                    authBuilder = authBuilder.AddJwtProvider(provider, crudService);
                    schemeList.Add(provider.SchemaName);
                }
            }

            services.AddAuthorization(options =>
            {
                var defaultPolicyBuilder = new AuthorizationPolicyBuilder(schemeList.ToArray())
                    .RequireAuthenticatedUser()
                    .Build();

                options.DefaultPolicy = defaultPolicyBuilder;

                var adminPolicyBuilder = new AuthorizationPolicyBuilder(schemeList.ToArray())
                    .RequireAuthenticatedUser()
                    .RequireRole("Admin")
                    .Build();
                options.AddPolicy("rawCmsAdmin", adminPolicyBuilder);
            });
        }

        public override void Configure(IApplicationBuilder app)
        {
            app.UseAuthentication();
            app.UseAuthorization();
            app.UseIdentityServer();
        }

        public override void ConfigureMvc(IMvcBuilder builder)
        {
        }

        public override void Setup(IConfigurationRoot configuration)
        {
        }
    }
}