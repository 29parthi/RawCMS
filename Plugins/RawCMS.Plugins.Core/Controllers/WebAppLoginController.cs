//******************************************************************************
// <copyright file="license.md" company="RawCMS project  (https://github.com/arduosoft/RawCMS)">
// Copyright (c) 2019 RawCMS project  (https://github.com/arduosoft/RawCMS)
// RawCMS project is released under GPL3 terms, see LICENSE file on repository root at  https://github.com/arduosoft/RawCMS .
// </copyright>
// <author>Daniele Fontani, Emanuele Bucarelli, Francesco Min�</author>
// <autogenerated>true</autogenerated>
//******************************************************************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Primitives;
using Newtonsoft.Json.Linq;
using RawCMS.Library.Core;

namespace RawCMS.Plugins.Core.Controllers
{
    [AllowAnonymous]
    [Route("api/web-app-login")]
    public class WebAppLoginController : Controller
    {
        public WebAppLoginController(AppEngine appEngine)
        {
        }

        [HttpPost]
        public IActionResult Post([FromBody]JObject loginInfo)
        {
            HttpResponseMessage res;

            var httpClient = new HttpClient();
            httpClient.BaseAddress = new Uri($"{this.Request.Scheme}://{this.Request.Host}/{this.Request.PathBase}");
            var content = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("grant_type", "password"),
                new KeyValuePair<string, string>("scope", "openid"),
                new KeyValuePair<string, string>("client_id", "raw.client"),
                new KeyValuePair<string, string>("client_secret", "raw.secret"),
                new KeyValuePair<string, string>("username", loginInfo.Value<string>("username")),
                new KeyValuePair<string, string>("password", loginInfo.Value<string>("password")),
            });

            res = httpClient.PostAsync("/connect/token", content).Result;

            this.HttpContext.Response.RegisterForDispose(res);
            return new HttpResponseMessageResult(res);
        }

        private class HttpResponseMessageResult : IActionResult
        {
            private static readonly string[] HeadersToSkip = {
                "Transfer-Encoding",
                "Server",
                "X-SourceFiles",
                "X-Powered-By",
                "Date"
            };

            private readonly HttpResponseMessage _responseMessage;

            public HttpResponseMessageResult(HttpResponseMessage responseMessage)
            {
                _responseMessage = responseMessage; // could add throw if null
            }

            public async Task ExecuteResultAsync(ActionContext context)
            {
                context.HttpContext.Response.StatusCode = (int)_responseMessage.StatusCode;

                foreach (var header in _responseMessage.Headers.Where(x => !HeadersToSkip.Contains(x.Key)))
                {
                    context.HttpContext.Response.Headers.TryAdd(header.Key, new StringValues(header.Value.ToArray()));
                }

                context.HttpContext.Response.Headers.TryAdd("Content-Type", "application/json");

                using (var stream = await _responseMessage.Content.ReadAsStreamAsync())
                {
                    await stream.CopyToAsync(context.HttpContext.Response.Body);
                    await context.HttpContext.Response.Body.FlushAsync();
                }
            }
        }
    }
}