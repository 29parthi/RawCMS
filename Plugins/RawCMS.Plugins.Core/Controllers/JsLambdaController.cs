//******************************************************************************
// <copyright file="license.md" company="RawCMS project  (https://github.com/arduosoft/RawCMS)">
// Copyright (c) 2019 RawCMS project  (https://github.com/arduosoft/RawCMS)
// RawCMS project is released under GPL3 terms, see LICENSE file on repository root at  https://github.com/arduosoft/RawCMS .
// </copyright>
// <author>Daniele Fontani, Emanuele Bucarelli, Francesco Mina'</author>
// <autogenerated>true</autogenerated>
//******************************************************************************
using Jint;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json.Linq;
using RawCMS.Library.Core;
using RawCMS.Library.Core.Attributes;
using RawCMS.Library.JavascriptClient;
using RawCMS.Library.Service;
using System;
using System.Collections.Generic;
using System.Reflection.Metadata;

namespace RawCMS.Plugins.Core.Controllers
{
    [AllowAnonymous]
    [RawAuthentication]
    [Route("api/js")]
    public class JsLambdaController
    {
        private readonly AppEngine lambdaManager;
        private readonly CRUDService crudService;

        public JsLambdaController(AppEngine lambdaManager, CRUDService crudService)
        {
            this.lambdaManager = lambdaManager;
            this.crudService = crudService;
        }

        [AllowAnonymous]
        [RawAuthentication]
        [HttpPost("{lambda}")]
        public JObject Post(string lambda, [FromBody] JObject input)
        {
            Library.DataModel.ItemList result = crudService.Query("_js", new Library.DataModel.DataQuery()
            {
                PageNumber = 1,
                PageSize = 1,
                RawQuery = $"{{\"Path\":\"{lambda}\"}}"
            });

            JToken js = result.Items[0];
            string code = js["Code"].ToString();

            Dictionary<string, object> tmpIn = input.ToObject<Dictionary<string, object>>();
            Dictionary<string, object> tmpOut = new Dictionary<string, object>();


            Engine engine = new Engine((x) => { x.AllowClr(typeof(JavascriptRestClient).Assembly); x.AllowClr(typeof(JavascriptRestClientRequest).Assembly); });
            

            engine.SetValue("input", tmpIn);
            engine.SetValue("RAWCMSRestClient", Jint.Runtime.Interop.TypeReference.CreateTypeReference(engine, typeof(JavascriptRestClient)));
            engine.SetValue("RAWCMSRestClientRequest", Jint.Runtime.Interop.TypeReference.CreateTypeReference(engine, typeof(JavascriptRestClientRequest)));
            engine.SetValue("output", tmpOut);
            try
            {
                engine.Execute(code);

            }
            catch (Exception e)
            {
                // TODO: log error...
                tmpOut.Add("Error", e.Message);
            }

            return JObject.FromObject(tmpOut);
        }
    }
}