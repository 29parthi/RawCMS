//******************************************************************************
// <copyright file="license.md" company="RawCMS project  (https://github.com/arduosoft/RawCMS)">
// Copyright (c) 2019 RawCMS project  (https://github.com/arduosoft/RawCMS)
// RawCMS project is released under GPL3 terms, see LICENSE file on repository root at  https://github.com/arduosoft/RawCMS .
// </copyright>
// <author>Daniele Fontani, Emanuele Bucarelli, Francesco Minà</author>
// <autogenerated>true</autogenerated>
//******************************************************************************
using RawCMS.Client.BLL.Core;
using RawCMS.Client.BLL.Model;
using RawCMS.Client.BLL.Parser;
using RestSharp;
using System;
using System.IO;
using System.Net.NetworkInformation;

namespace RawCMS.Client.BLL.Helper
{
    public class TokenHelper
    {
        private static Runner log = LogProvider.Runner;

        public static string getToken(LoginOptions opts)
        {
            //string baseUrl = ClientConfig.GetValue<string>("BaseUrl");

            string url = $"{opts.ServerUrl}/connect/token";

            log.Debug($"Server url: {url}");

            if (!RawCmsHelper.Ping(url))
            {
                log.Error("host not found.");
                return string.Empty;
            }

            //create RestSharp client and POST request object
            RestClient client = new RestClient(url);
            RestRequest request = new RestRequest(Method.POST);

            //add GetToken() API method parameters
            request.Parameters.Clear();
            request.AddParameter("grant_type", "password");

            request.AddParameter("username", opts.Username);
            request.AddParameter("password", opts.Password);

            request.AddParameter("client_id", opts.ClientId);
            request.AddParameter("client_secret", opts.ClientSecret);
            request.AddParameter("scoope", "openid");

            //make the API request and get the response
            IRestResponse response = client.Execute(request);
            TokenResponse res = Newtonsoft.Json.JsonConvert.DeserializeObject<TokenResponse>(response.Content);
            if (response.IsSuccessful)
            {
                log.Debug("Success response token");
                return res.access_token;
            }
            else
            {
                log.Warn("Unable to get valid token.");
                throw new ExceptionToken(res.error, res.error_description);
            }
        }

       

       
    }
}