//******************************************************************************
// <copyright file="license.md" company="RawCMS project  (https://github.com/arduosoft/RawCMS)">
// Copyright (c) 2019 RawCMS project  (https://github.com/arduosoft/RawCMS)
// RawCMS project is released under GPL3 terms, see LICENSE file on repository root at  https://github.com/arduosoft/RawCMS .
// </copyright>
// <author>Daniele Fontani, Emanuele Bucarelli, Francesco Mina'</author>
// <autogenerated>true</autogenerated>
//******************************************************************************
using Microsoft.Extensions.Logging;
using Newtonsoft.Json.Linq;
using RestSharp;
using System;
using System.Collections.Generic;
using System.Text;

namespace RawCMS.Library.JavascriptClient
{
    public class JavascriptRestClient
    {
        public ILogger logger { get; private set; }
        public JavascriptRestClient()
        {

        }
        public JavascriptRestClient(ILogger logger)
        {
            this.logger = logger;
        }

        JavascriptRestClientMessage<JObject> Execute(JavascriptRestClientRequest javascriptRequest)
        {
            JavascriptRestClientMessage<JObject> response = new JavascriptRestClientMessage<JObject>(new JObject());

            RestClient client = new RestClient(javascriptRequest.Url);
            RestRequest request = new RestRequest(javascriptRequest.Method)
            {
                //request headers type
                RequestFormat = DataFormat.Json
            };
            // set the request header
            foreach (var el in javascriptRequest.Header)
            {
                request.AddHeader(el.Key, el.Value);

            }

            //add parameters and token to request
            request.Parameters.Clear();
            foreach (var el in javascriptRequest.QueryParams)
            {
                request.AddParameter(el.Key, el.Value);
            }

            
            //request.AddParameter("Authorization", "Bearer " + req.Token, ParameterType.HttpHeader);

            logger.LogDebug($"request URI: {client.BuildUri(request)}");
            IRestResponse restResponse = null;
            try
            {
                restResponse = client.Execute(request);

            }
            catch (Exception untrapped)
            {
                //TODO: log here
                response.Errors.Add(new Library.Core.Error()
                {
                    Code = "UNEXPEXTED",
                    Title = "JavascriptRestClient produces an unexpexted error",
                    Description = untrapped.Message,
                });
            }
            //make the API request and get a response
          
            response.Data = Newtonsoft.Json.JsonConvert.DeserializeObject<JObject>(restResponse.Content);
            return response;
        }


        public string getText()
        {
            return "ptova";
        }
        public static string getStaticText()
        {
            return "staticprova";
        }
    }
}
