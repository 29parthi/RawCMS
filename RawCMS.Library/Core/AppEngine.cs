//******************************************************************************
// <copyright file="license.md" company="RawCMS project  (https://github.com/arduosoft/RawCMS)">
// Copyright (c) 2019 RawCMS project  (https://github.com/arduosoft/RawCMS)
// RawCMS project is released under GPL3 terms, see LICENSE file on repository root at  https://github.com/arduosoft/RawCMS .
// </copyright>
// <author>Daniele Fontani, Emanuele Bucarelli, Francesco Min�</author>
// <autogenerated>true</autogenerated>
//******************************************************************************
using McMaster.NETCore.Plugins;
using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using RawCMS.Library.Core.Extension;
using RawCMS.Library.Core.Helpers;
using RawCMS.Library.Core.Interfaces;
using RawCMS.Library.Schema;
using RawCMS.Library.Service;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;

namespace RawCMS.Library.Core
{
    public class AppEngine
    {
       
        private  ILogger _logger;        

        

        private readonly ReflectionManager reflectionManager;
        

        public List<Lambda> Lambdas { get; set; } = new List<Lambda>();
      

        public List<Plugin> Plugins { get; set; } = new List<Plugin>();
      

        string pluginFolder = null;
        public AppEngine(ILogger _logger, Func<string,string> pluginPathLocator,ReflectionManager reflectionManager)
        {

            this._logger = _logger;

            this.pluginFolder = pluginPathLocator.Invoke(AppContext.BaseDirectory);
            this.reflectionManager = reflectionManager;

            LoadPlugins();
        }

        public  List<FieldTypeValidator> GetFieldTypeValidators()
        {
          return   this.reflectionManager.GetAssignablesInstances<FieldTypeValidator>();
        }

        public void Init()
        {
            LoadLambdas();
        }

        List<PluginLoader> loaders = new List<PluginLoader>();
        private void LoadPluginAssemblies()
        {

            loaders.Clear();

            List<Assembly> assembly = new List<Assembly>();
            assembly.Add(typeof(AppEngine).Assembly);
            RecoursiveAddAssembly(typeof(AppEngine).Assembly,assembly);
            assembly = assembly.Distinct().ToList();

            List<Type> typesToAdd = new List<Type>();
            foreach (var ass in assembly)
            {
                Type[] types = ass.GetTypes();
                foreach (var type in types)
                {
                    if (type.IsPublic)
                    {
                        typesToAdd.Add(type);
                    }
                }

                typesToAdd.AddRange(types);
            }

            typesToAdd = typesToAdd.Distinct().ToList();
            // create plugin loaders
            var pluginsDir = pluginFolder ?? Path.Combine(AppContext.BaseDirectory, "plugins");

            var pluginFiles = Directory.GetFiles(pluginsDir, "plugin.config", SearchOption.AllDirectories);
            foreach (var pluginInfo in pluginFiles)
            {
                var loader = PluginLoader.CreateFromConfigFile(
                filePath: pluginInfo,
                sharedTypes: typesToAdd.ToArray());

                loaders.Add(loader);

            }

        }

        public static AppEngine Create(string pluginPath, ILogger logger, ReflectionManager reflectionManager)
        {
            var appEngine = new AppEngine(
                  logger,
                  basedir => {                      

                      var folder = basedir + pluginPath;
                      if (Path.IsPathRooted(pluginPath))
                      {
                          folder = pluginPath;
                      }

                      return Path.GetFullPath(folder);//Directory.GetDirectories(folder).FirstOrDefault();
                    },
                  reflectionManager
              );//Hardcoded for dev
            return appEngine;
        }

        private static void RecoursiveAddAssembly(Assembly assembly,List<Assembly> assemblyList)
        {
            foreach (AssemblyName assName in assembly.GetReferencedAssemblies())
            {
               
                if (!assemblyList.Any(x=>x.FullName==assName.FullName))
                {

                    Assembly.Load(assName);
                    var ass = AppDomain.CurrentDomain.GetAssemblies().FirstOrDefault(x => x.GetName(false).Name == assName.Name);
                    assemblyList.Add(ass);
                    RecoursiveAddAssembly(ass, assemblyList);
                   
                }
            }
        }

        private void LoadPlugins()
        {
            _logger.LogDebug("Load plugins");
            LoadPluginAssemblies();
            Plugins = GetPlugins();//GetAnnotatedInstances<Plugin>();

            if (_logger.IsEnabled(LogLevel.Debug))
            {
                Plugins.ForEach(x =>
                {
                    _logger.LogDebug("Plugin enabled {0}", x.Name);
                });
            }
            

            //Core plugin must be the first to be called. This ensure it also in case thirdy party define malicius priority.
            int minPriority = 0;
            Plugins.ForEach(x => { if (x.Priority <= minPriority) { minPriority = x.Priority - 1; } });
            Plugin corePlugin = Plugins.Single(x => x.Name == "Core");
            corePlugin.Priority = minPriority;
        }

        private List<Plugin> GetPlugins()
        {
            List<Plugin> plugins = new List<Plugin>();
            // Create an instance of plugin types
            foreach (var loader in loaders)
            {
                foreach (var pluginType in loader
                    .LoadDefaultAssembly()
                    .GetTypes()
                    .Where(t => typeof(Plugin).IsAssignableFrom(t) && !t.IsAbstract))
                {
                    // This assumes the implementation of IPlugin has a parameterless constructor
                    Plugin plugin = (Plugin)Activator.CreateInstance(pluginType);
                    plugins.Add(plugin);
                }
            }
            return plugins;
        }

        

        private void LoadLambdas()
        {
            DiscoverLambdasInBundle();
        }


        public void InvokeConfigureServices(List<Assembly> ass, IMvcBuilder builder, IConfigurationRoot configuration)
        {
            this.Plugins.OrderBy(x => x.Priority).ToList().ForEach(x =>
            {
                x.Setup(configuration);
                x.ConfigureMvc(builder);
                ass.Add(x.GetType().Assembly);
            });
        }

        public void InvokePostConfigureServices(IServiceCollection services)
        {
            this.Plugins.OrderBy(x => x.Priority).ToList().ForEach(x =>
            {
                x.ConfigureServices(services);
            });
        }

        /// <summary>
        /// Find and load all lambas already loaded with main bundle (no dinamycs)
        /// </summary>
        private void DiscoverLambdasInBundle()
        {
            _logger.LogDebug("Discover Lambdas in Bundle");

            List<Lambda> lambdas = this.reflectionManager.GetAnnotatedInstances<Lambda>();

            foreach (Lambda instance in lambdas)
            {
                if (instance != null)
                {                 
                   

                    if (instance is IInitable)
                    {
                        ((IInitable)instance).Init();
                    }

                    Lambdas.Add(instance);

                    _logger.LogInformation("-" + instance.Name + " | " + instance.GetType().FullName);
                }
            }
        }
    }
}